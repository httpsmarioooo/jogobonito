1. Crear el Repository validar que el repository exista
2. Crear el DTO hacer el dto, copiar y pegar los:

 DECORADORES:

 EJEMPLO
 @Data
 @Builder
 @AllArgsConstructor
 @NoArgsConstructor

 Y traer todos los private de la clase domain correspondiente


3. Agregar el controler y luego las inyecciones con su constructor:

  Inyecciones

  EJEMPLO
  private JudgePerMatchRepository judgePerMatchRepository;
  private JudgePerMatchService judgePerMatchService;

    Constructores

    EJEMPLO
    public JudgePerMatchController(JudgePerMatchRepository judgePerMatchRepository, JudgePerMatchService judgePerMatchService) {
        this.judgePerMatchRepository = judgePerMatchRepository;
        this.judgePerMatchService = judgePerMatchService;
    }

4. Crear SERVICE

EJEMPLO
public interface PlayerService {
    PlayerDTO guardarNuevoPlaye(PlayerDTO playerDTO);
}

5. Crear SERVICEIMPL

Comenzar a agregar el:

import org.springframework.stereotype.Service;
@Service

y poner el implements PlayerService

EJEMPLO
public class PlayerServiceImpl >implements PlayerService< {
}

Luego pararce en el error y undir la opcion implementar metodos:
EJEMPLO
@Override
    public PlayerDTO guardarNuevoPlaye(PlayerDTO playerDTO) {
        return null;
    }


6. Nos devolvemos al controlador y veremos que ya no esta el error en las ultimas lineas del codigo.
7. Vamos a copiar el metodo para guardar.

EJEMPLO
@PostMapping(value = "/guardarNuevoPlayer")
    public ResponseEntity<PlayerDTO> guardarNuevoPlayer(@RequestBody PlayerDTO playerDTO){
        PlayerDTO playerResponse = playerService.guardarNuevoPlayer(playerDTO);
        return new ResponseEntity<>(playerResponse, HttpStatus.CREATED);
    }

8. Crear Mapper
9. Ajustar el Controller
10. Luego nos vamos a Servicesimpl y le damos a la FX funcion y entramos a las excepciones pero en Services (solito)
11. Comenzamos a hacer las validaciones. Validaciones de la tabla dependiente a independiente IMPL
12. Ultimas validaciones en el mismo impl en la parte final---


---------------------------TEMPORADA 2----------------------------------------
POST: Para crear nuevos registros en una tabla. Se necesita en las tablas donde se puedan agregar nuevos elementos desde la aplicación.
GET: Para obtener información de la tabla. Todas las tablas deberían tenerlo, ya que siempre es útil poder consultar los datos.
PUT: Para actualizar registros existentes en la tabla. Es necesario en las tablas donde se pueden modificar los datos.

POST, GET, PUT:
Independientes
stadiums, TERMINADO
teams,  TERMINADO
event_type, TERMINADO
judges, TERMINADO
judge_roles. TERMINADO

Dependientes
players, TERMINADO PRINCIPAL
matches, TERMINADO
awards, TERMINADO
coaches, TERMINADO
standings, TERMINADO


Dependientes pero POST, GET (sin PUT):
goals TERMINADO
assists TERMINADO
match_events TERMINADO
judges_per_match TERMINADO


PASOS-------------------------------------------------------

1. Copiar los metodos.
2. Agregarlos en el service
3. Arreglar el impl que es copiar todo ese mogollon de codigo (dependecias).
 a. Pero primero, saldra un error, hay que agregar los metodos y ya se quitara ese error.
 b. Ya podemos copiar las dependecias.


CAMBIOS_:
Meter el método obtener en el services y en el impl de TODAS LAS TABLAS y dejar como dependecia solo el
private CoachService coachService en los contraladores;

Player: Completado
Stadium: Completado
Coache: Completado


Tablas donde sí se puede agregar DELETE:
stadiums
teams
players
goals
assists
awards
coaches
event_type
match_events
judges
judge_roles
judges_per_match


Tablas donde NO se debería agregar DELETE:
matches (por el riesgo de afectar goles, asistencias, y eventos relacionados)
standings (se actualiza automáticamente y depende de los resultados de los partidos)



Los Post (Create) de todas las entidades - TERMINADO
Los Put (Update) de todas las entidades - TERMINADO
Buscar por Id (Get) - TERMINADO
Buscar por código o algúna otra llave por la cual se pueda buscar / TERMINADO  se puede decir porque no pienso hacerlas en todas)

Debe funcionar con Swagger, y manejando los errores con el RestAdviceController. HECHO

Recuerden que para que funcione los controllers, debe funcionar los Service, ServiceImpl, Repository y Mappers. HECHO

Debe trabajar con DTO's y Entities. HECHO


